#Logger 程序端使用，写入日志消息
#Appender 日志输出的目的地 ，指定日志输出的地方，比如控制台，文件
	#################
	#ConsoleAppender 控制台
	#FileAppender 单个文件
	#RollingFileAppender  有上限大小的文件，超过限制，新增一个文件
	################
	#log4j还提供DailyRollingFileAppender(每天产生一个日志文件)
#Layout 日志格式化
	#############
	# %m 输出代码中指定的消息
	# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
	# %r 输出自应用启动到输出该log信息耗费的毫秒数
	# %c 输出所属的类目，通常就是所在类的全名
	# %t 输出产生该日志事件的线程名
	# %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
	# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，
	#   比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
	# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
	#############	

log4j.rootLogger=INFO,C,F

log4j.appender.C=org.apache.log4j.ConsoleAppender
log4j.appender.C.threshold=INFO
log4j.appender.C.layout=org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %p %c {%m}%n


log4j.appender.F=org.apache.log4j.RollingFileAppender
log4j.appender.F.Append=true
log4j.appender.F.File=/home/logs/log.log
log4j.appender.F.MaxFileSize=50MB
log4j.appender.F.threshold=INFO
log4j.appender.F.layout=org.apache.log4j.PatternLayout
log4j.appender.F.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %p{%l} {%m}%n
