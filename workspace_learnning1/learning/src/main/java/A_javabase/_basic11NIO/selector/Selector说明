使用Selector , 可以只用一个线程处理所有的通道,减少线程开销

Selector的创建
Selector selector = Selector.open();

向Selector注册通道
为了将Channel和Selector配合使用，必须将channel注册到selector上
channel.configureBlocking(false);  //channel切换为非阻塞模式
SelectionKey key = channel.register(selector,Selectionkey.OP_READ); //注册channel 到selector
第二个参数，其他常见值
SelectionKey.OP_CONNECT    connect    用来指定某个channel成功连接到另一个服务器称为“连接就绪”
SelectionKey.OP_ACCEPT     accept     一个server socket channel准备好接收新进入的连接称为“接收就绪”
SelectionKey.OP_READ       read       一个有数据可读的通道可以说是“读就绪”
SelectionKey.OP_WRITE      write      等待写数据的通道可以说是“写就绪”。
也可以组合使用 ，例如 int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;
这种称为 interest集合
判断集合中是否有某个值 ，可以这么写
int interestSet = selectionKey.interestOps();
boolean isInterestedInAccept  = (interestSet & SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT；
boolean isInterestedInConnect = interestSet & SelectionKey.OP_CONNECT;


与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，
因为FileChannel不能切换到非阻塞模式。而套接字通道都可以。


从SelectionKey访问Channel和Selector很简单。如下：
Channel  channel  = selectionKey.channel();
Selector selector = selectionKey.selector();

SelectionKey以下方法检测channel中什么事件或操作已经就绪
selectionKey.isAcceptable();
selectionKey.isConnectable();
selectionKey.isReadable();
selectionKey.isWritable();





